{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the EV tool","text":"<p>This project aims to simulate the effect of an EV charging system on a sites annual energy bills, consumption and carbon emissions. There are 3 basic optimization methods that show the varying effect on consumption, emissions and cost:</p> <ol> <li><code>Basic optimisation</code> ensures the system does not cause the site to exceed its load demand limit.</li> <li><code>Emission optimisation</code> ensures the verhicles are charged emitting the minimum amount of carbon possible, while keeping load demand in mind. This is done using energy generation emission data to optimise charging to times where the impact is its lowest.</li> <li><code>Cost optimisation</code> charges the vehicles when energy is its cheapest, while keeping load demand in mind. This is done using the sites annual energy price profile.</li> </ol> <p>These optimisation options are displayed against the current site system to highlight the changes. An example of this can be found in <code>Demo_notebook.ipynb</code> in the <code>notebooks</code> folder.</p>"},{"location":"reference/data/data_processing/","title":"Data processing","text":""},{"location":"reference/data/data_processing/#ev_model.data.data_processing.create_dataf_base","title":"<code>create_dataf_base(electricity_demand)</code>","text":"<p>Creates a base dataframe for optimization. </p> <p>Parameters:</p> Name Type Description Default <code>electricity_demand</code> <code>DataFrame</code> <p>A dataframe with the electricity demand of the site.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>A dataframe with the electricity demand and the optimizer target.</p>"},{"location":"reference/data/data_processing/#ev_model.data.data_processing.create_dataf_for_control","title":"<code>create_dataf_for_control(target_dataf, electricity_demand)</code>","text":"<p>Creates a dataframe for optization based on control method. </p> <p>Parameters:</p> Name Type Description Default <code>target_dataf</code> <code>DataFrame</code> <p>A dataframe with the target data (site import limit, carbon intensity, cost).  </p> required <code>electricity_demand</code> <code>DataFrame</code> <p>A dataframe with the electricity demand of the site.  </p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>A concated dataframe with the target data and the electricity demand.</p>"},{"location":"reference/data/example_data_import/","title":"Example data import","text":""},{"location":"reference/data/example_data_import/#ev_model.data.example_data_import.export_electricity_prices","title":"<code>export_electricity_prices(year=None)</code>","text":"<p>Import electricity prices from a csv file.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>int | None</code> <p>The year of the data to import. If None, all the data are imported.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A dataframe with the electricity prices.</p>"},{"location":"reference/data/example_data_import/#ev_model.data.example_data_import.import_electricity_prices","title":"<code>import_electricity_prices()</code>","text":"<p>Import electricity prices from a csv file.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A dataframe with the electricity prices.</p>"},{"location":"reference/data/viz_functions/","title":"Viz functions","text":""},{"location":"reference/data/viz_functions/#ev_model.data.viz_functions.SitePlotter","title":"<code>SitePlotter</code>","text":"<p>Class to create plots for the site demand and the simulated demand.     ------------  NOT FUNCTIONAL  ------------</p> <p>Attributes:</p> Name Type Description <code>site_demand</code> <code>DataFrame</code> <p>A dataframe with the site demand.</p> <code>sim_demand</code> <code>DataFrame</code> <p>A dataframe with the simulated demand.</p> <p>Methods:</p> Name Description <code>combined_sim_and_site</code> <p>Combines the site demand and the simulated demand.</p> <code>plot_for_a_week</code> <p>Plots the demand for a week.</p> <code>plot_base_profile</code> <p>Plots the site demand for a week.</p> <code>plot_simulated_profile</code> <p>Plots the simulated demand for a week.</p> <code>plot_base_simulated_combined_power</code> <p>Plots the site and simulated demand for a week.</p> <code>plot_base_simulated_combined_profile</code> <p>Plots the site and simulated demand for a week.</p> <code>create_plots</code> <p>Creates the plots.</p>"},{"location":"reference/data/viz_functions/#ev_model.data.viz_functions.SitePlotter.combined_sim_and_site","title":"<code>combined_sim_and_site()</code>","text":"<p>Combines the site demand and the simulated demand.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame A dataframe with the combined demand.</p>"},{"location":"reference/data/viz_functions/#ev_model.data.viz_functions.SitePlotter.create_plots","title":"<code>create_plots(ylim_max)</code>","text":"<p>Creates the plots.</p>"},{"location":"reference/data/viz_functions/#ev_model.data.viz_functions.SitePlotter.create_plots--arguments","title":"Arguments","text":"<p><code>ylim_max</code>: <code>float</code>     The maximum value of the y-axis.</p>"},{"location":"reference/data/viz_functions/#ev_model.data.viz_functions.SitePlotter.create_plots--returns","title":"Returns","text":"<p><code>None</code></p>"},{"location":"reference/data/viz_functions/#ev_model.data.viz_functions.SitePlotter.plot_base_profile","title":"<code>plot_base_profile(title, ylim_max)</code>","text":"<p>Plots the site demand for a week.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The title of the plot.  </p> required <code>ylim_max</code> <code>float</code> <p>The maximum value of the y-axis.  </p> required <p>Returns:</p> Type Description <code>Axes</code> <p>plt.Axes The plot.</p>"},{"location":"reference/data/viz_functions/#ev_model.data.viz_functions.SitePlotter.plot_base_simulated_combined_power","title":"<code>plot_base_simulated_combined_power(title, ylim_max)</code>","text":"<p>Plots the site and simulated demand for a week.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The title of the plot.  </p> required <code>ylim_max</code> <code>float</code> <p>The maximum value of the y-axis.  </p> required <p>Returns:</p> Type Description <code>Axes</code> <p>plt.Axes: The plot.</p>"},{"location":"reference/data/viz_functions/#ev_model.data.viz_functions.SitePlotter.plot_base_simulated_combined_profile","title":"<code>plot_base_simulated_combined_profile(title, ylim_max)</code>","text":"<p>Plots the site and simulated demand for a week.</p>"},{"location":"reference/data/viz_functions/#ev_model.data.viz_functions.SitePlotter.plot_base_simulated_combined_profile--arguments","title":"Arguments","text":"<p><code>title</code>: <code>str</code>     The title of the plot. <code>ylim_max</code>: <code>float</code>     The maximum value of the y-axis.  </p>"},{"location":"reference/data/viz_functions/#ev_model.data.viz_functions.SitePlotter.plot_base_simulated_combined_profile--returns","title":"Returns","text":"<p><code>plt.Axes</code>     The plot.</p>"},{"location":"reference/data/viz_functions/#ev_model.data.viz_functions.SitePlotter.plot_for_a_week","title":"<code>plot_for_a_week(var_name)</code>","text":"<p>Plots the demand for a week.</p> <p>Parameters:</p> Name Type Description Default <code>var_name</code> <code>str</code> <p>The name of the variable to plot.  </p> required <p>Returns;   pd.DataFrame     A dataframe with the demand for a week.</p>"},{"location":"reference/data/viz_functions/#ev_model.data.viz_functions.SitePlotter.plot_simulated_profile","title":"<code>plot_simulated_profile(title, ylim_max)</code>","text":"<p>Plots the simulated demand for a week.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The title of the plot.  </p> required <code>ylim_max</code> <code>float</code> <p>The maximum value of the y-axis.  </p> required <p>Returns:</p> Type Description <code>Axes</code> <p>plt.Axes: The plot.</p>"},{"location":"reference/models/bricks/","title":"Bricks","text":""},{"location":"reference/models/bricks/#ev_model.models.bricks.Battery","title":"<code>Battery</code>  <code>dataclass</code>","text":"<p>Class used to model the battery of an EV and its charging process.</p> <p>Attributes:</p> Name Type Description <code>current_soc</code> <code>float</code> <p>The current state of charge of the battery.</p> <code>target_soc</code> <code>float</code> <p>The target state of charge of the battery.</p> <code>battery_size</code> <code>float</code> <p>The size of the battery in kWh.</p> <code>schedule</code> <code>Schedule</code> <p>The schedule of the EV.</p> <code>battery_losses</code> <code>float</code> <p>The losses of the battery in %/timestep.</p> <code>initial_soc</code> <code>float</code> <p>The initial state of charge of the battery.</p> <p>Methods:</p> Name Description <code>current_energy_stored</code> <p>Returns the current energy stored in the battery.</p> <code>target_energy_stored</code> <p>Returns the target energy stored in the battery.</p> <code>requested_energy</code> <p>Returns the requested energy to be stored in the battery.</p> <code>target_charge_achieved</code> <p>Returns if the target charge is achieved.</p> <code>calculate_charging_time</code> <p>Calculates the charging time for different chargers.</p> <code>calculate_losses</code> <p>Calculates the losses of the battery.</p> <code>battery_is_charging</code> <p>Charges the battery if it is not fully charged.</p> <code>reset_current_soc</code> <p>Resets the current state of charge of the battery.</p> <code>battery_is_plugged</code> <p>Charges the battery if it is plugged.</p> <code>run_model</code> <p>Runs the model of the battery.</p>"},{"location":"reference/models/bricks/#ev_model.models.bricks.Battery.current_energy_stored","title":"<code>current_energy_stored: float</code>  <code>property</code>","text":"<p>Returns the current energy stored in the battery.</p> <p>Returns:</p> Type Description <code>float</code> <p>The current energy stored in the battery.</p>"},{"location":"reference/models/bricks/#ev_model.models.bricks.Battery.requested_energy","title":"<code>requested_energy: float</code>  <code>property</code>","text":"<p>Returns the requested energy to be stored in the battery.</p> <p>Returns:</p> Type Description <code>float</code> <p>The requested energy to be stored in the battery.</p>"},{"location":"reference/models/bricks/#ev_model.models.bricks.Battery.target_energy_stored","title":"<code>target_energy_stored: float</code>  <code>property</code>","text":"<p>Returns the target energy stored in the battery.</p> <p>Returns:</p> Type Description <code>float</code> <p>The target energy stored in the battery.</p>"},{"location":"reference/models/bricks/#ev_model.models.bricks.Battery.battery_is_charging","title":"<code>battery_is_charging(energy_input)</code>","text":"<p>Charges the battery if it is not fully charged.</p> <p>Parameters:</p> Name Type Description Default <code>energy_input</code> <code>float</code> <p>The energy input to the battery.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The energy input to the battery.</p>"},{"location":"reference/models/bricks/#ev_model.models.bricks.Battery.battery_is_plugged","title":"<code>battery_is_plugged(current_dt, energy_input)</code>","text":"<p>Charges the battery if it is plugged and if it is not fully charged yet.</p> <p>Parameters:</p> Name Type Description Default <code>current_dt</code> <code>datetime</code> <p>The current datetime.  </p> required <p>energy_input float:     The energy input to the battery.  </p> <p>Returns:</p> Type Description <code>float</code> <p>The energy input to the battery.</p>"},{"location":"reference/models/bricks/#ev_model.models.bricks.Battery.calculate_charging_time","title":"<code>calculate_charging_time(chargers_max_output)</code>","text":"<p>Calculates the charging time based on different chargers.</p> <p>Parameters:</p> Name Type Description Default <code>chargers_max_output</code> <code>list[float]</code> <p>The list of maximum outputs of the chargers.</p> required <p>Returns:</p> Type Description <code>dict[int, float]</code> <p>A dictionary with the charging time for different chargers.</p>"},{"location":"reference/models/bricks/#ev_model.models.bricks.Battery.calculate_losses","title":"<code>calculate_losses()</code>","text":"<p>Calculates the losses of the battery from the current State Of Charge.</p>"},{"location":"reference/models/bricks/#ev_model.models.bricks.Battery.reset_current_soc","title":"<code>reset_current_soc()</code>","text":"<p>The current soc is resetted to its initial value.</p>"},{"location":"reference/models/bricks/#ev_model.models.bricks.Battery.run_model","title":"<code>run_model(current_dt, energy_input)</code>","text":"<p>Calculate losses and charge the EV if it is connected and if it is not fully charged yet.</p> <p>Parameters:</p> Name Type Description Default <code>current_dt</code> <code>datetime</code> <p>The current datetime.  </p> required <code>energy_input</code> <code>float</code> <p>The energy input to the battery.  </p> required <p>Returns:</p> Type Description <code>float</code> <p>The energy input to the battery.</p>"},{"location":"reference/models/bricks/#ev_model.models.bricks.Battery.target_charge_achieved","title":"<code>target_charge_achieved()</code>","text":"<p>Returns if the target charge is achieved.</p> <p>Returns:</p> Type Description <code>bool</code> <p>If the target charge is achieved.</p>"},{"location":"reference/models/bricks/#ev_model.models.bricks.Schedule","title":"<code>Schedule</code>  <code>dataclass</code>","text":"<p>Class used to define the schedule of people with EVs, when are they working,  connecting their EVs, etc. WIP: to be developed</p> <p>Attributes:</p> Name Type Description <code>arrival_time</code> <code>time</code> <p>The time when the person arrives at work.</p> <code>departure_time</code> <code>time</code> <p>The time when the person leaves work.</p> <code>list_days</code> <code>list[int] | None</code> <p>The list of days when the EV is connected.</p> <p>Methods:</p> Name Description <code>is_plugged</code> <p>Returns if the EV is connected.</p> <code>get_plugged_profile</code> <p>Returns the profile of the EV being connected.</p>"},{"location":"reference/models/bricks/#ev_model.models.bricks.Schedule.get_plugged_profile","title":"<code>get_plugged_profile(timesteps)</code>","text":"<p>Returns the profile of the EV being connected.</p> <p>Parameters:</p> Name Type Description Default <code>timesteps</code> <code>NDArray[datetime64]</code> <p>A numpy array with the timesteps.</p> required <p>Returns:</p> Type Description <code>NDArray[Any]</code> <p>A numpy array with the profile of the EV being connected.</p>"},{"location":"reference/models/bricks/#ev_model.models.bricks.Schedule.is_plugged","title":"<code>is_plugged(current_dt)</code>","text":"<p>Returns if the EV is connected.</p> <p>Parameters:</p> Name Type Description Default <code>current_dt</code> <code>datetime</code> <p>The current datetime.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>If the EV is connected.</p>"},{"location":"reference/models/bricks/#ev_model.models.bricks.TimeserieRecorder","title":"<code>TimeserieRecorder</code>  <code>dataclass</code>","text":"<p>Class used to record timeseries data.</p> <p>Attributes:</p> Name Type Description <code>index</code> <code>NDArray[datetime64]</code> <p>A numpy array with the datetime index.</p> <code>header</code> <code>list[Enum]</code> <p>A list with the column names.</p> <code>recorded_data</code> <code>DataFrame</code> <p>A dataframe with the recorded data.</p> <p>Methods:</p> Name Description <code>get_column_names</code> <p>Returns the column names.</p> <code>get_index_name</code> <p>Returns the index name.</p> <code>record_single_data</code> <p>Records a single data point.</p> <code>record_batch_data</code> <p>Records a batch of data.</p>"},{"location":"reference/models/bricks/#ev_model.models.bricks.TimeserieRecorder.get_column_names","title":"<code>get_column_names()</code>","text":"<p>Returns the column names.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>A list with the column names.</p>"},{"location":"reference/models/bricks/#ev_model.models.bricks.TimeserieRecorder.get_index_name","title":"<code>get_index_name()</code>","text":"<p>Returns the index name.</p> <p>Returns:</p> Type Description <code>str</code> <p>The index name.</p>"},{"location":"reference/models/bricks/#ev_model.models.bricks.TimeserieRecorder.record_batch_data","title":"<code>record_batch_data(index, values, col_name)</code>","text":"<p>Records a batch of data.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>NDArray[datetime64]</code> <p>A numpy array with the datetime index.  </p> required <code>values</code> <code>NDArray[float64]</code> <p>A numpy array with the values to be recorded.  </p> required <code>col_name</code> <code>str</code> <p>The name of the column to be recorded.</p> required"},{"location":"reference/models/bricks/#ev_model.models.bricks.TimeserieRecorder.record_single_data","title":"<code>record_single_data(new_index, new_data)</code>","text":"<p>append new data</p>"},{"location":"reference/models/charger/","title":"Charger","text":""},{"location":"reference/models/charger/#ev_model.models.charger.Charger","title":"<code>Charger</code>  <code>dataclass</code>","text":"<p>Class to represent a charger.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the charger.</p> <code>charger_type</code> <code>ChargerType</code> <p>The type of the charger.</p> <code>max_output</code> <code>float</code> <p>The maximum output of the charger.</p> <code>ev_list</code> <code>list[VehiclesProtocol]</code> <p>A list with the EVs connected to the charger.</p> <code>no_connections</code> <code>int</code> <p>The maximum number of EVs that can be connected to this charger.</p> <code>data_recorder</code> <code>ChargerRecorder</code> <p>The data recorder for the charger.</p> <code>specific_capital_cost</code> <code>float</code> <p>The specific capital cost of the charger.</p> <code>specific_maintenance_cost</code> <code>float</code> <p>The specific maintenance cost of the charger.</p> <code>size_system</code> <code>float</code> <p>The size of the system.</p> <code>lifetime</code> <code>int</code> <p>The lifetime of the charger.</p> <p>Methods:</p> Name Description <code>charging_profile</code> <p>Returns the charging profile for the charger.</p> <code>get_recorded_data_from_evs</code> <p>Returns the recorded data from all EVs.</p> <code>get_recorded_data</code> <p>Returns the recorded data from the charger.</p>"},{"location":"reference/models/charger/#ev_model.models.charger.Charger.charging_profile","title":"<code>charging_profile(timesteps, schedule_charging=None)</code>","text":"<p>Returns the charging profile for the charger.</p> <p>Parameters:</p> Name Type Description Default <code>timesteps</code> <code>NDArray[Any]</code> <p>The timesteps to be used.</p> required <code>schedule_charging</code> <code>NDArray[float64] | None</code> <p>The schedule of charging for the charger.</p> <code>None</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>The total charger output.</p>"},{"location":"reference/models/charger/#ev_model.models.charger.Charger.get_recorded_data","title":"<code>get_recorded_data()</code>","text":"<p>Retrieve the recorded data from the charger. </p> <p>Returns:</p> Type Description <code>dict[str, NDArray[float64]]</code> <p>The recorded data from the charger.</p>"},{"location":"reference/models/charger/#ev_model.models.charger.Charger.get_recorded_data_from_evs","title":"<code>get_recorded_data_from_evs()</code>","text":"<p>Return the recorded data from all EVs.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The recorded data from all EVs.</p>"},{"location":"reference/models/controller/","title":"Controller","text":""},{"location":"reference/models/controller/#ev_model.models.controller.Optimized_Sites","title":"<code>Optimized_Sites</code>  <code>dataclass</code>","text":"<p>Class to run the optimizer for each control method.</p> <p>Attributes:</p> Name Type Description <code>timesteps</code> <code>NDArray[datetime64]</code> <p>The timesteps.</p> <code>site_electricity_demand</code> <code>DataFrame</code> <p>The site electricity demand.</p> <code>dict_of_chargers</code> <code>dict[str, Charger]</code> <p>The dictionary of chargers.</p> <code>site_data_recorder</code> <code>TimeserieRecorder</code> <p>The site data recorder.</p> <code>max_import_demand</code> <code>DataFrame</code> <p>The maximum import demand.</p> <code>carbon_dataf</code> <code>DataFrame | None</code> <p>The carbon data frame.</p> <code>price_dataf</code> <code>DataFrame | None</code> <p>The price data frame.</p> <code>pv_dataf</code> <code>DataFrame | None</code> <p>The PV data frame.</p> <p>Methods:</p> Name Description <code>site_dataf_creator</code> <p>Creates the site data frame.</p> <code>run_controller_optimizer</code> <p>Runs the optimizer.</p> <code>calculate_totals</code> <p>Calculates the totals.</p> <code>generate_controlled_site</code> <p>Generates the controlled site.</p> <code>site_charging_profiles</code> <p>Generates the site charging profiles.</p> <code>run_control_method</code> <p>Runs the control method.</p> <code>run_all_control_methods</code> <p>Runs all control methods.</p>"},{"location":"reference/models/controller/#ev_model.models.controller.Optimized_Sites.calculate_totals","title":"<code>calculate_totals(site_dataf, chargers_dict)</code>","text":"<p>Calculates the totals.</p> <p>Parameters:</p> Name Type Description Default <code>site_dataf</code> <code>DataFrame</code> <p>The site data frame.  </p> required <code>chargers_dict</code> <code>dict[str, Charger]</code> <p>The dictionary of chargers.  </p> required <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>The totals.</p>"},{"location":"reference/models/controller/#ev_model.models.controller.Optimized_Sites.generate_controlled_site","title":"<code>generate_controlled_site(chargers, site_dataf, control_type)</code>","text":"<p>Generates the controlled site.</p> <p>Parameters:</p> Name Type Description Default <code>chargers</code> <code>dict[str, Charger]</code> <p>The dictionary of chargers.</p> required <code>site_dataf</code> <code>DataFrame</code> <p>The site data frame.</p> required <code>control_type</code> <code>SiteScheduleOptimzer</code> <p>The control type.</p> required <p>Returns:</p> Type Description <code>Ev_System</code> <p>The controlled site.</p>"},{"location":"reference/models/controller/#ev_model.models.controller.Optimized_Sites.run_all_control_methods","title":"<code>run_all_control_methods()</code>","text":"<p>Runs all control methods.</p> <p>Returns:</p> Type Description <code>dict[str, Ev_System]</code> <p>A dictionary with the controlled sites.</p>"},{"location":"reference/models/controller/#ev_model.models.controller.Optimized_Sites.run_control_method","title":"<code>run_control_method(control_type)</code>","text":"<p>Runs the control method.</p> <p>Parameters:</p> Name Type Description Default <code>control_type</code> <code>SiteScheduleOptimzer</code> <p>The control type.</p> required <p>Returns:</p> Type Description <code>Ev_System | None</code> <p>The controlled site or None.</p>"},{"location":"reference/models/controller/#ev_model.models.controller.Optimized_Sites.run_controller_optimizer","title":"<code>run_controller_optimizer(site_dataf, chargers)</code>","text":"<p>Runs the optimizer.</p> <p>Parameters:</p> Name Type Description Default <code>site_dataf</code> <code>DataFrame</code> <p>The site dataframe based on the control type.  </p> required <code>chargers</code> <code>dict[str, Charger]</code> <p>The dictionary of chargers.  </p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>The results dataframe.</p>"},{"location":"reference/models/controller/#ev_model.models.controller.Optimized_Sites.site_charging_profiles","title":"<code>site_charging_profiles(controlled_site, site_dataf, chargers)</code>","text":"<p>Generates the site charging profiles.</p> <p>Parameters:</p> Name Type Description Default <code>controlled_site</code> <code>Ev_System</code> <p>The controlled site.</p> required <code>site_dataf</code> <code>DataFrame</code> <p>The site data frame.</p> required <code>chargers</code> <code>dict[str, Charger]</code> <p>The dictionary of chargers.</p> required"},{"location":"reference/models/controller/#ev_model.models.controller.Optimized_Sites.site_dataf_creator","title":"<code>site_dataf_creator(control_type)</code>","text":"<p>Creates the site data frame.</p> <p>Parameters:</p> Name Type Description Default <code>control_type</code> <code>SiteScheduleOptimzer</code> <p>The control type.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>The site data frame.</p>"},{"location":"reference/models/controller/#ev_model.models.controller.apply_new_charging_profile","title":"<code>apply_new_charging_profile(dataf, energy_required)</code>","text":"<p>Applies the new charger load profile to the dataframe removing the additional    cumulative values and sorts back to chronological order.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The dataframe.</p> required <code>energy_required</code> <code>float</code> <p>The energy required.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>The updated dataframe.</p>"},{"location":"reference/models/controller/#ev_model.models.controller.calculate_optimized_charging_profile","title":"<code>calculate_optimized_charging_profile(dataf, energy_required)</code>","text":"<p>Calculates the updated optimized charging profile and returns it.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The dataframe.</p> required <code>energy_required</code> <code>float</code> <p>The energy required.</p> required <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>The updated charging profile.</p>"},{"location":"reference/models/controller/#ev_model.models.controller.charger_load_availability_profile","title":"<code>charger_load_availability_profile(site_load_demand_profile, max_import_demand, max_charger_output, existing_load_demand=None)</code>","text":"<p>Calculate the load availability profile from a charger based on the max import demand constraint.</p> <p>Parameters:</p> Name Type Description Default <code>site_load_demand_profile</code> <code>NDArray[float64]</code> <p>The site load demand profile.</p> required <code>max_import_demand</code> <code>DataFrame</code> <p>The maximum import demand for each timestep.</p> required <code>max_charger_output</code> <code>float</code> <p>The maximum charger output.</p> required <code>existing_load_demand</code> <code>NDArray[float64] | None</code> <p>The existing load demand.</p> <code>None</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>The charger load availability profile.</p>"},{"location":"reference/models/controller/#ev_model.models.controller.combine_load_profile","title":"<code>combine_load_profile(site_dataf, new_ev, max_import_demand, max_charger_output)</code>","text":"<p>Combines the basic charger availability load profile with EV availability and  ensures it won't exceed the demand limit.</p> <p>Parameters:</p> Name Type Description Default <code>site_dataf</code> <code>DataFrame</code> <p>The site data frame.</p> required <code>new_ev</code> <code>EV</code> <p>The new EV.</p> required <code>max_import_demand</code> <code>DataFrame</code> <p>The maximum import demand.</p> required <code>max_charger_output</code> <code>float</code> <p>The maximum charger output.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>The combined load profile.</p>"},{"location":"reference/models/controller/#ev_model.models.controller.cumsum_energy_consumed","title":"<code>cumsum_energy_consumed(site_dataf, ascending=True)</code>","text":"<p>Creates a cumulated energy column to identify when required charge is reached. </p> <p>Parameters:</p> Name Type Description Default <code>site_dataf</code> <code>DataFrame</code> <p>The site dataframe.</p> required <code>ascending</code> <code>bool</code> <p>The ascending order.</p> <code>True</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The data frame with the cumulative energy consumed.</p>"},{"location":"reference/models/controller/#ev_model.models.controller.find_last_index","title":"<code>find_last_index(dataf, energy_required)</code>","text":"<p>Finds the index where target charge is achieved.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The dataframe.</p> required <code>energy_required</code> <code>float</code> <p>The energy required to reach full charge.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The last index.</p>"},{"location":"reference/models/controller/#ev_model.models.controller.generate_filter","title":"<code>generate_filter(dataf, energy_required)</code>","text":"<p>Generates a filter to identify and extract the data for when the target charge is achieved.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The dataframe.</p> required <code>energy_required</code> <code>float</code> <p>The energy required.</p> required <p>Returns:</p> Type Description <code>NDArray[bool_]</code> <p>The filter.</p>"},{"location":"reference/models/controller/#ev_model.models.controller.get_charging_profile_for_single_day","title":"<code>get_charging_profile_for_single_day(day_dataf, ev, max_import_demand, max_charger_load)</code>","text":"<p>Applies the charging profile to a single day of data.</p> <p>Parameters:</p> Name Type Description Default <code>day_dataf</code> <code>DataFrame</code> <p>The day data frame.</p> required <code>ev</code> <code>EV</code> <p>The EV.</p> required <code>max_import_demand</code> <code>DataFrame</code> <p>The maximum import demand.</p> required <code>max_charger_load</code> <code>float</code> <p>The maximum charger load.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>The updated dataframe.</p>"},{"location":"reference/models/controller/#ev_model.models.controller.get_charging_profile_for_year","title":"<code>get_charging_profile_for_year(site_data, temp_ev, max_charger_output, max_import_demand)</code>","text":"<p>Applies controls to a charger and its EVs to each day of the year. </p> <p>Parameters:</p> Name Type Description Default <code>site_data</code> <code>DataFrame</code> <p>The site data frame.</p> required <code>temp_ev</code> <code>EV</code> <p>The EV.</p> required <code>max_charger_output</code> <code>float</code> <p>The maximum charger output.</p> required <code>max_import_demand</code> <code>DataFrame</code> <p>The maximum import demand.</p> required <p>Returns:</p> Type Description <code>None</code> <p>The charging profile for the year.</p>"},{"location":"reference/models/controller/#ev_model.models.controller.get_single_day_data","title":"<code>get_single_day_data(temp_date, site_data)</code>","text":"<p>Extracts the data for a single day.</p> <p>Parameters:</p> Name Type Description Default <code>temp_date</code> <code>date</code> <p>The date.</p> required <code>site_data</code> <code>DataFrame</code> <p>The site data frame.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>The data frame for the single day.</p>"},{"location":"reference/models/controller/#ev_model.models.controller.optimizer_selector","title":"<code>optimizer_selector(electricity_demand, target_dataf=None)</code>","text":"<p>Choose between basic, emissions or price controls to optimize charging.</p> <p>Parameters:</p> Name Type Description Default <code>electricity_demand</code> <code>DataFrame</code> <p>The electricity demand.</p> required <code>target_dataf</code> <code>DataFrame</code> <p>The target dataframe (carbon, price, basic).</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A dataframe containing site demand and the chosen control method.</p>"},{"location":"reference/models/controller/#ev_model.models.controller.run_optimizer","title":"<code>run_optimizer(dict_chargers, site_df, max_import_demand)</code>","text":"<p>Loops through each charger and EV to apply a controlled charging profile to each one.</p> <p>Parameters:</p> Name Type Description Default <code>dict_chargers</code> <code>dict[str, Charger]</code> <p>The dictionary of chargers.</p> required <code>site_df</code> <code>DataFrame</code> <p>The site data frame.</p> required <code>max_import_demand</code> <code>DataFrame</code> <p>The maximum import demand.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>The results dataframe.</p>"},{"location":"reference/models/ev_system/","title":"Ev system","text":""},{"location":"reference/models/ev_system/#ev_model.models.ev_system.Ev_System","title":"<code>Ev_System</code>  <code>dataclass</code>","text":"<p>Class to represent an EV system.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Name of the EV system.</p> <code>data_recorder</code> <code>TimeserieRecorder</code> <p>Data recorder to store the results of the simulation.</p> <code>dict_site_assets</code> <code>dict[str, Charger]</code> <p>Dictionary of charger.Charger in the system.</p> <code>timezone</code> <code>str</code> <p>Timezone of the system.</p> <code>_size_system</code> <code>float</code> <p>Installed capacity of the system.</p> <code>technology_type</code> <code>TechnologyType</code> <p>Technology type of the system.</p> <p>Methods:</p> Name Description <code>get_capacity_installed</code> <p>Return the total installed capacity of the site.</p> <code>run_default_simulation</code> <p>Run a default simulation of the system.</p> <code>get_recorded_data_from_chargers</code> <p>Return the recorded energy consumption data from all chargers.</p> <code>size_system</code> <p>Return the installed capacity of the system.</p> <code>capital_cost</code> <p>Return the capital cost of the system.</p> <code>annual_maintenance_cost</code> <p>Return the annual maintenance cost of the system.</p> <code>lifetime</code> <p>Return the lifetime of the system.</p> <code>additional_demand</code> <p>Return the additional demand of the system.</p> <code>onsite_generation</code> <p>Return the onsite generation of the system.</p> <code>export_results</code> <p>Export the results of the system.</p>"},{"location":"reference/models/ev_system/#ev_model.models.ev_system.Ev_System.additional_demand","title":"<code>additional_demand: pd.DataFrame</code>  <code>property</code>","text":"<p>Return the additional demand of the system.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A dataframe with the additional demand of the system.</p>"},{"location":"reference/models/ev_system/#ev_model.models.ev_system.Ev_System.annual_maintenance_cost","title":"<code>annual_maintenance_cost: dict[e2s_enums.TechnologyType, float]</code>  <code>property</code>","text":"<p>Return the annual maintenance cost of the system.</p> <p>Returns:</p> Type Description <code>dict[TechnologyType, float]</code> <p>A dictionary with the annual maintenance cost of the system.</p>"},{"location":"reference/models/ev_system/#ev_model.models.ev_system.Ev_System.capital_cost","title":"<code>capital_cost: dict[e2s_enums.TechnologyType, float]</code>  <code>property</code>","text":"<p>Return the capital cost of the system.</p> <p>Returns:</p> Type Description <code>dict[TechnologyType, float]</code> <p>A dictionary with the capital cost of the system.</p>"},{"location":"reference/models/ev_system/#ev_model.models.ev_system.Ev_System.lifetime","title":"<code>lifetime: int</code>  <code>property</code>","text":"<p>Return the lifetime of the system.</p> <p>Returns:</p> Type Description <code>int</code> <p>The lifetime of the system.</p>"},{"location":"reference/models/ev_system/#ev_model.models.ev_system.Ev_System.onsite_generation","title":"<code>onsite_generation: pd.DataFrame</code>  <code>property</code>","text":"<p>Return the onsite generation of the system.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A dataframe with the onsite generation of the system.</p>"},{"location":"reference/models/ev_system/#ev_model.models.ev_system.Ev_System.size_system","title":"<code>size_system: dict[e2s_enums.TechnologyType, float]</code>  <code>property</code> <code>writable</code>","text":"<p>Return the installed capacity of the system.</p> <p>Returns:</p> Type Description <code>dict[TechnologyType, float]</code> <p>A dictionary with the installed capacity of the system.</p>"},{"location":"reference/models/ev_system/#ev_model.models.ev_system.Ev_System.export_results","title":"<code>export_results()</code>","text":"<p>Export the results of the system.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A dataframe with the results of the system.</p>"},{"location":"reference/models/ev_system/#ev_model.models.ev_system.Ev_System.get_capacity_installed","title":"<code>get_capacity_installed()</code>","text":"<p>Return the total installed capacity of the site.</p> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The total installed capacity of the site.</p>"},{"location":"reference/models/ev_system/#ev_model.models.ev_system.Ev_System.get_recorded_data_from_chargers","title":"<code>get_recorded_data_from_chargers()</code>","text":"<p>Return the recorded energy consumption data from all chargers.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: A dataframe with the recorded energy consumption data from all chargers.</p>"},{"location":"reference/models/ev_system/#ev_model.models.ev_system.Ev_System.run_default_simulation","title":"<code>run_default_simulation()</code>","text":"<p>Run a default simulation of the system.</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"reference/models/sim_functions/","title":"Sim functions","text":""},{"location":"reference/models/sim_functions/#ev_model.models.sim_functions.create_ev_system","title":"<code>create_ev_system(sim_year, dict_chargers)</code>","text":"<p>Create an EV system with a dictionary of chargers.</p> <p>Parameters:</p> Name Type Description Default <code>sim_year</code> <code>int</code> <p>Year of the simulation.</p> required <code>dict_chargers</code> <code>dict[str, Charger]</code> <p>Dictionary of charger objects.</p> required <p>Returns:</p> Type Description <code>Ev_System</code> <p>EV system object.</p>"},{"location":"reference/models/sim_functions/#ev_model.models.sim_functions.create_multiple_EVs","title":"<code>create_multiple_EVs(nb_evs, sim_year, list_of_days, min_battery_size=60, max_battery_size=120)</code>","text":"<p>Create a list of EVs.</p> <p>Parameters:</p> Name Type Description Default <code>nb_evs</code> <code>int</code> <p>Number of EVs to create.</p> required <code>sim_year</code> <code>int</code> <p>Year of the simulation.</p> required <code>list_of_days</code> <code>list[int]</code> <p>List of days to create the EV schedule.</p> required <code>min_battery_size</code> <code>int</code> <p>Minimum size of the EV battery.</p> <code>60</code> <code>max_battery_size</code> <code>int</code> <p>Maximum size of the EV battery.</p> <code>120</code> <p>Returns:</p> Type Description <code>list[EV]</code> <p>List of EVs.</p>"},{"location":"reference/models/sim_functions/#ev_model.models.sim_functions.create_multiple_chargers","title":"<code>create_multiple_chargers(list_evs, sim_year, charger_output)</code>","text":"<p>Create as many chargers as EVs and assign each EV to a charger.</p> <p>Parameters:</p> Name Type Description Default <code>list_evs</code> <code>list[EV]</code> <p>List of EVs to assign to the chargers.</p> required <code>sim_year</code> <code>int</code> <p>Year of the simulation.</p> required <code>charger_output</code> <code>float</code> <p>Maximum output of the charger (E.g 7kW, 21kW).</p> required <p>Returns:</p> Type Description <code>dict[str, Charger]</code> <p>Dictionary of charger objects with the assigned EVs.</p>"},{"location":"reference/models/sim_functions/#ev_model.models.sim_functions.create_recorder","title":"<code>create_recorder(sim_year, data_recorder_type)</code>","text":"<p>Create a timeseries recorder for the simulation.</p> <p>Parameters:</p> Name Type Description Default <code>sim_year</code> <code>int</code> <p>Year of the simulation.</p> required <code>data_recorder_type</code> <code>DataRecorderType</code> <p>Type of data recorder.</p> required <p>Returns:</p> Type Description <code>TimeserieRecorder</code> <p>Timeseries recorder for the simulation.</p>"},{"location":"reference/models/sim_functions/#ev_model.models.sim_functions.create_single_EV","title":"<code>create_single_EV(ev_name, sim_year, list_of_days, battery_size)</code>","text":"<p>Create a single EV object.</p> <p>Parameters:</p> Name Type Description Default <code>ev_name</code> <code>str</code> <p>Name of the EV.</p> required <code>sim_year</code> <code>int</code> <p>Year of the simulation.</p> required <code>list_of_days</code> <code>list[int]</code> <p>List of days to create the EV schedule.</p> required <code>battery_size</code> <code>float</code> <p>Size of the EV battery.</p> required <p>Returns:</p> Type Description <code>EV</code> <p>EV object.</p>"},{"location":"reference/models/sim_functions/#ev_model.models.sim_functions.create_single_charger","title":"<code>create_single_charger(charger_name, sim_year, charger_type, charger_output, list_evs)</code>","text":"<p>Create a single charger and assign a list of EVs to it.</p> <p>Parameters:</p> Name Type Description Default <code>charger_name</code> <code>str</code> <p>Name of charger object.</p> required <code>sim_year</code> <code>int</code> <p>Year of the simulation.</p> required <code>charger_type</code> <code>ChargerType</code> <p>Type of charger.</p> required <code>charger_output</code> <code>float</code> <p>Maximum output of the charger (E.g 7kW, 21kW).</p> required <code>list_evs</code> <code>list[EV]</code> <p>List of EVs that to assign to the charger.</p> required <p>Returns:</p> Type Description <code>Charger</code> <p>Charger object with the assigned EVs.</p>"},{"location":"reference/models/sim_functions/#ev_model.models.sim_functions.create_timesteps","title":"<code>create_timesteps(start_date, end_date)</code>","text":"<p>Create a numpy array with the timesteps for the simulation.</p> <p>Parameters:</p> Name Type Description Default <code>start_date</code> <code>datetime</code> <p>Start date of the simulation.</p> required <code>end_date</code> <code>datetime</code> <p>End date of the simulation.</p> required <p>Returns:</p> Type Description <code>NDArray[datetime64]</code> <p>Numpy array with the timesteps for the simulation.</p>"},{"location":"reference/models/sim_functions/#ev_model.models.sim_functions.get_list_columns","title":"<code>get_list_columns(data_recorder_type)</code>","text":"<p>Get the list of columns for the data recorder.</p> <p>Parameters:</p> Name Type Description Default <code>data_recorder_type</code> <code>DataRecorderType</code> <p>Type of data recorder.</p> required <p>Returns:</p> Type Description <code>list[Enum]</code> <p>List of columns for the data recorder.</p>"},{"location":"reference/models/sim_functions/#ev_model.models.sim_functions.set_fleet_charging_amount","title":"<code>set_fleet_charging_amount(list_evs, charging_amount=0.15)</code>","text":"<p>Set the target state of charge for the fleet of EVs.</p> <p>Parameters:</p> Name Type Description Default <code>list_evs</code> <code>list[EV]</code> <p>List of EVs to set the target state of charge.</p> required <code>charging_amount</code> <code>float</code> <p>Amount of charge to add to the target state of charge.</p> <code>0.15</code>"},{"location":"reference/models/sim_parameters/","title":"Sim parameters","text":""},{"location":"reference/models/vehicles/","title":"Vehicles","text":""},{"location":"reference/models/vehicles/#ev_model.models.vehicles.EV","title":"<code>EV</code>  <code>dataclass</code>","text":"<p>Class to represent an EV. </p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>str Name of the EV.</p> <code>battery</code> <code>Battery</code> <p>bricks.Battery Battery of the EV.</p> <code>data_recorder</code> <code>TimeserieRecorder</code> <p>bricks.TimeserieRecorder Data recorder to store the results of the simulation.</p> <p>Methods:</p> Name Description <code>charging_profile</code> <p>Return the charging profile of the EV.</p> <code>get_recorded_data</code> <p>Return the recorded data of the EV.</p>"},{"location":"reference/models/vehicles/#ev_model.models.vehicles.EV.charging_profile","title":"<code>charging_profile(timesteps, charger_max_energy_outputs)</code>","text":"<p>Run the charging profile of the EV.</p> <p>Parameters:</p> Name Type Description Default <code>timesteps</code> <code>NDArray[datetime64]</code> <p>Timesteps for the simulation.</p> required <code>charger_max_energy_outputs</code> <code>NDArray[float64]</code> <p>Maximum energy output of the charger.</p> required <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>Energy input of the EV.</p>"},{"location":"reference/models/vehicles/#ev_model.models.vehicles.EV.get_recorded_data","title":"<code>get_recorded_data()</code>","text":"<p>Return the recorded data of the EV.</p> <p>Returns:</p> Type Description <code>dict[str, NDArray[float64]]</code> <p>A dictionary with the recorded data of the EV.</p>"}]}